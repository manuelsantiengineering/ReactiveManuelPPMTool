swagger: "2.0"
info:
  title: "Swagger Petstore"
  description: "This is the API documentation for the Project Portfolio Management Tool prepared by Manuel E. Santiago"
  version: "1.0.0"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "rmfstreet.herokuapp.com"
basePath: "/"
tags:
- name: "Project Portfolio Management Tool (PPM Tool)"
  description: "Everything about Manuel's First Project Portfolio Management Tool (PPM Tool)."
  externalDocs:
    description: "Find out about the tool"
    url: "https://rmfstreet.herokuapp.com/"
- name: "Main"
  description: "Access to Petstore orders"

schemes:
- "https"
- "http"


paths:
  /api/users/register:
    post:
      tags:
      - "User Registration"
      summary: "Register a new user."
      description: "This endpoint uses a post request to add a new user."
      operationId: "registerUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "firstName"
        in: "query"
        description: "The first name of the user to register"
        required: true
        type: "string"
      - name: "username"
        in: "query"
        description: "The user name of the user to register"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password of the user to register"
        required: true
        type: "string"
      - name: "confirmPassword"
        in: "query"
        description: "Confirm the password of the user to register"
        required: true
        type: "string"

      responses:
        200:
          description: "Successful operation."
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Needs user entity parameters."
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"




  /store/inventory:
    get:
      tags:
      - "store"
      summary: "Returns pet inventories by status"
      description: "Returns a map of status codes to quantities"
      operationId: "getInventory"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
      security:
      - api_key: []
  /store/order:
    post:
      tags:
      - "store"
      summary: "Place an order for a pet"
      description: ""
      operationId: "placeOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "order placed for purchasing the pet"
        required: true
        schema:
          $ref: "#/definitions/Order"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        400:
          description: "Invalid Order"
  /store/order/{orderId}:
    get:
      tags:
      - "store"
      summary: "Find purchase order by ID"
      description: "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions"
      operationId: "getOrderById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of pet that needs to be fetched"
        required: true
        type: "integer"
        maximum: 10.0
        minimum: 1.0
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
    delete:
      tags:
      - "store"
      summary: "Delete purchase order by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of the order that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
    
    
    
definitions:

  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      password:
        type: "string"
      confirmPassword:
        type: "string"
      created_At:
        type: "string"
        format: "date-time"
      updated_At:
        type: "string"
        format: "date-time"
      projects:
        type: "array"
        items:
          # $ref: "#/definitions/Project"
          type: null

      
      
      
  Project:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      projectName:
        type: "string"
      projectIdentifier:
        type: "string"
      description:
        type: "string"
      start_date:
        type: "string"
        format: "date-time"
      end_date:
        type: "string"
        format: "date-time"
      created_At:
        type: "string"
        format: "date-time"
      updated_At:
        type: "string"
        format: "date-time"
      projectLeader:
        type: "string"
        
        
      # shipDate:
      #   type: "string"
      #   format: "date-time"
      # status:
      #   type: "string"
      #   description: "Order Status"
      #   enum:
      #   - "placed"
      #   - "approved"
      #   - "delivered"
      # complete:
      #   type: "boolean"
      #   default: false

  ProjectTask:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      projectSequence:
        type: "string"
      summary:
        type: "string"
      acceptanceCriteria:
        type: "string"
      status:
        type: "string"
      priority:
        type: "integer"
        format: "int32"
      dueDate:
        type: "string"
        format: "date-time"
      projectIdentifier:
        type: "string"
      created_At:
        type: "string"
        format: "date-time"
      updated_At:
        type: "string"
        format: "date-time"



  Backlog:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      ProjectTaskSequence:
        type: "integer"
        format: "int32"
      projectIdentifier:
        type: "string"
        
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"